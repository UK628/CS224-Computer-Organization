CS224
Lab 4
Section 2
Utku Kurtulmu≈ü
21903025

for basys3, not simulation
module BasysTop(input logic clk, nextInst, reset,
        output [6:0]seg, logic dp,
        output [3:0] an,            
	     output  logic       memwrite);
	     
	     logic clear = 0; //not needer for pulse controller
	     logic new_clk;
	     logic new_reset;
	     logic[31:0]  writedata,instr, readdata,pc, dataadr;           
	     
	     
	     pulse_controller nextInstController(clk, nextInst, clear, new_clk);
	     pulse_controller resetController(clk, reset, clear, new_reset);
	     
	     // instantiate processor and memories  
         mips mips (new_clk, new_reset, pc, instr, memwrite, dataadr, writedata, readdata);  
         imem imem (pc[7:2], instr);  
         dmem dmem (new_clk, memwrite, dataadr, writedata, readdata);
         
         //seven segment
         display_controller sevseg(clk, pc[7:4], pc[3:0], dataadr[7:4],dataadr[3:0],seg,dp,an);
	     
	     	     
endmodule



//for simulation
module top  (input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr, 
	     output  logic[31:0] pc, instr, readdata,           
	     output  logic       memwrite);    

   // instantiate processor and memories  
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (pc[7:2], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule



// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule



// External instruction memory used by MIPS single-cycle
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output


module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20020005;  	//addi $v0, $0, 0x0005
		8'h04: instr = 32'h2003000c;  	//addi $v1, $0, 0x000c
		8'h08: instr = 32'h2067fff7;  	//addi $a3, $v1,0xfff7 (12-9) (a3 = 3)
		8'h0c: instr = 32'h00e22025;  	//or $a0, $a3, $v0
		8'h10: instr = 32'h00642824;    //and $a1, $v1, $a0 
		8'h14: instr = 32'h00a42820;    //add $a1, $a1, $a0 
		8'h18: instr = 32'h10a7000a;    //beq $a1, $a3, 0xA
		8'h1c: instr = 32'h0064202a;    //slt $a0, $v1, $a0
		8'h20: instr = 32'h10800001;    //beq $a0, $0, 0x0001
		8'h24: instr = 32'h20050000;    //addi $a1, $0, 0x0000
		8'h28: instr = 32'h00e2202a;    //slt $a0, $a3, $v0
		8'h2c: instr = 32'h00853820;    //add $a3, $a0, $a1
		8'h30: instr = 32'h00e23822;    //sub $a3, $a3, $v0
		8'h34: instr = 32'hac670044;    //sw $a3, 0x0044, $v1
		8'h38: instr = 32'h8c020050;    //lw $v0, 0x0050, $0
		8'h3c: instr = 32'h08000011;    //j 0x00000011
		8'h40: instr = 32'h20020001;    //addi $v0, $zero, 0x1
		8'h44: instr = 32'hac020054;    //sw $v0, 0x0054, $0
		//8'h48: instr = 32'h08000012;	// j  j 0x12 causes loop
		8'h48:instr = 32'hF884ffff;    //subi $a0, $a0, -1
        8'h4c: instr = 32'h20040005;  	//addi $a0, $zero, 5  
        8'h50: instr = 32'h20040005;  	//addi $a0, $zero, 5 
		8'h54: instr = 32'h2005000c;  	//addi $a1, $zero, 12
		8'h58: instr = 32'h20060002;  	//addi $a2, $zero, 2
	    8'h5c: instr = 32'hfca62000;  	//sracc $a0, $a1, $a2     # $a0 = (12 / 4) + 5 = 8
	    8'h60: instr = 32'h20840001;  	//addi $a0, $a0, 1
	    8'h64: instr = 32'hF8840005;    //subi $a0, $a0, 5
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule


// single-cycle MIPS processor, with controller and datapath

module mips (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,
             output logic        memwrite,
             output logic[31:0]  aluout, writedata,
             input  logic[31:0]  readdata);

  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump, srrac;
  logic [2:0]  alucontrol;

  controller c (instr[31:26], instr[5:0], zero, memtoreg, memwrite, pcsrc,
                        alusrc, regdst, regwrite, jump, srrac,alucontrol);

  datapath dp (clk, reset, memtoreg, pcsrc, alusrc, regdst, regwrite, jump, srrac,
                          alucontrol, zero, pc, instr, aluout, writedata, readdata);

endmodule
module controller(input  logic[5:0] op, funct,
                  input  logic     zero,
                  output logic     memtoreg, memwrite,
                  output logic     pcsrc, alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump, srrac,
                  output logic[2:0] alucontrol);

   logic [1:0] aluop;
   logic       branch;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
		 jump, srrac, aluop);

   aludec  ad (funct, aluop, alucontrol);

   assign pcsrc = branch & zero;

endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump, srrac,
	              output logic[1:0] aluop );
   logic [9:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump, srrac} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 10'b1100001000; // R-type
      6'b100011: controls <= 10'b1010010000; // LW
      6'b101011: controls <= 10'b0010100000; // SW
      6'b000100: controls <= 10'b0001000100; // BEQ
      6'b001000: controls <= 10'b1010000000; // ADDI
      6'b000010: controls <= 10'b0000000010; // J
      6'b111111: controls <= 10'b1100001101; //srrac 
      6'b111110: controls <= 10'b1010000100; //subi
      default:   controls <= 10'bxxxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      2'b11: alucontrol =  3'b011;  //srrac (for srrac)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module datapath (input  logic clk, reset, memtoreg, pcsrc, alusrc, regdst,
                 input  logic regwrite, jump, srrac,
		 input  logic[2:0]  alucontrol, 
                 output logic zero, 
		 output logic[31:0] pc, 
	         input  logic[31:0] instr,
                 output logic[31:0] aluout, writedata, 
	         input  logic[31:0] readdata);

  logic [4:0]  writereg;
  logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch;
  logic [31:0] signimm, signimmsh, srca, srcb, result, RFD, RFDplus, AluResult;
 
  // next PC logic
  flopr #(32) pcreg(clk, reset, pcnext, pc);
  adder       pcadd1(pc, 32'b100, pcplus4);
  sl2         immsh(signimm, signimmsh);
  adder       pcadd2(pcplus4, signimmsh, pcbranch);
  mux2 #(32)  pcbrmux(pcplus4, pcbranch, pcsrc,
                      pcnextbr);
  mux2 #(32)  pcmux(pcnextbr, {pcplus4[31:28], 
                    instr[25:0], 2'b00}, jump, pcnext);

// register file logic
   regfile     rf (clk, regwrite, instr[25:21], instr[20:16], writereg,
                   result, srca, writedata, RFD);

   mux2 #(5)    wrmux (instr[20:16], instr[15:11], regdst, writereg);
   mux2 #(32)  resmux (AluResult, readdata, memtoreg, result);
   signext         se (instr[15:0], signimm);

  // ALU logic
   mux2 #(32)  srcbmux (writedata, signimm, alusrc, srcb);
   alu         alu (srca, srcb, alucontrol, aluout, zero);
   
  //Updates
  adder myAdder(RFD, aluout, RFDplus);
  mux2 #(32) myMux(aluout,RFDplus,srrac,AluResult);

endmodule


module regfile (input    logic clk, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2, rd3);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff@(posedge clk)
     if (we3) 
         rf [wa3] <= wd3;	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;
  assign rd3 = rf[wa3];

endmodule


module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b011: result = a >> b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
endmodule


module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

//parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

xdc file(constraints)
# This file is a general .xdc for the Basys3 rev B board 
# To use it in a project: 
# - uncomment the lines corresponding to used pins 
# - rename the used ports (in each line, after get_ports) according to the top level signal names in the project 

# Clock signal 
set_property PACKAGE_PIN W5 [get_ports clk]  	 	 	 	  
 	set_property IOSTANDARD LVCMOS33 [get_ports clk] 
 create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk] 

# Switches 
#set_property PACKAGE_PIN V17 [get_ports {sb}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {sb}] 
#set_property PACKAGE_PIN V16 [get_ports {sa}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {sa}] 
#set_property PACKAGE_PIN W16 [get_ports {reset}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {reset}] 
#set_property PACKAGE_PIN W17 [get_ports {c}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {c}] 
#set_property PACKAGE_PIN W15 [get_ports {sw[4]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[4]}] 
#set_property PACKAGE_PIN V15 [get_ports {sw[5]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[5]}] 
#set_property PACKAGE_PIN W14 [get_ports {sw[6]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[6]}] 
#set_property PACKAGE_PIN W13 [get_ports {sw[7]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[7]}] 
#set_property PACKAGE_PIN V2 [get_ports {sw[8]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[8]}] 
#set_property PACKAGE_PIN T3 [get_ports {sw[9]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[9]}] 
#set_property PACKAGE_PIN T2 [get_ports {sw[10]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {sw[10]}] 
#set_property PACKAGE_PIN R3 [get_ports {i4}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {i4}] 
#set_property PACKAGE_PIN W2 [get_ports {i3}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {i3}] 
#set_property PACKAGE_PIN U1 [get_ports {i2}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {i2}] 
#set_property PACKAGE_PIN T1 [get_ports {i1}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {i1}] 
#set_property PACKAGE_PIN R2 [get_ports {c1}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {c1}] 
  
# LEDs 
set_property PACKAGE_PIN U16 [get_ports {memwrite}]  	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {memwrite}] 
#set_property PACKAGE_PIN E19 [get_ports {lb[1]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {lb[1]}] 
#set_property PACKAGE_PIN U19 [get_ports {lb[2]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {lb[2]}] 
#set_property PACKAGE_PIN V19 [get_ports {la[0]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {la[0]}] 
#set_property PACKAGE_PIN W18 [get_ports {la[0]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {la[0]}] 
#set_property PACKAGE_PIN U15 [get_ports {la[1]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {la[1]}] 
#set_property PACKAGE_PIN U14 [get_ports {la[2]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {la[2]}] 
#set_property PACKAGE_PIN V14 [get_ports {led[7]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[7]}] 
#set_property PACKAGE_PIN V13 [get_ports {led[8]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[8]}] 
#set_property PACKAGE_PIN V3 [get_ports {led[9]}] 	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[9]}] 
#set_property PACKAGE_PIN W3 [get_ports {led[10]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[10]}] 
#set_property PACKAGE_PIN U3 [get_ports {led[11]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[11]}] 
#set_property PACKAGE_PIN P3 [get_ports {led[12]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {led[12]}] 
#set_property PACKAGE_PIN N3 [get_ports {teststate[0]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {teststate[0]}] 
#set_property PACKAGE_PIN P1 [get_ports {teststate[1]}]  	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports {teststate[1]}] 
#set_property PACKAGE_PIN L1 [get_ports {teststate[2]}]  	 	 	 	  			
#	set_property IOSTANDARD LVCMOS33 [get_ports {teststate[2]}] 
 	 
 	 
##7 segment display 
set_property PACKAGE_PIN W7 [get_ports {seg[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[0]}] 
set_property PACKAGE_PIN W6 [get_ports {seg[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[1]}] 
set_property PACKAGE_PIN U8 [get_ports {seg[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[2]}] 
set_property PACKAGE_PIN V8 [get_ports {seg[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[3]}] 
set_property PACKAGE_PIN U5 [get_ports {seg[4]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[4]}] 
set_property PACKAGE_PIN V5 [get_ports {seg[5]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[5]}] 
set_property PACKAGE_PIN U7 [get_ports {seg[6]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {seg[6]}] 
set_property PACKAGE_PIN V7 [get_ports dp]  	 	 	 	  
 	set_property IOSTANDARD LVCMOS33 [get_ports dp] 
set_property PACKAGE_PIN U2 [get_ports {an[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[0]}] 
set_property PACKAGE_PIN U4 [get_ports {an[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[1]}] 
set_property PACKAGE_PIN V4 [get_ports {an[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[2]}] 
set_property PACKAGE_PIN W4 [get_ports {an[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[3]}] 

##Buttons 
#set_property PACKAGE_PIN U18 [get_ports btnC]  	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports btnC] 
#set_property PACKAGE_PIN T18 [get_ports btnU]  	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports btnU] 
set_property PACKAGE_PIN W19 [get_ports nextInst]  	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports nextInst] 
set_property PACKAGE_PIN T17 [get_ports reset]  	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports reset] 
#set_property PACKAGE_PIN U17 [get_ports btnD]  	 	 	 	 	 
# 	set_property IOSTANDARD LVCMOS33 [get_ports btnD] 
  
##Pmod Header JA 
##Sch name = JA1 
#set_property PACKAGE_PIN J1 [get_ports {JA[0]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[0]}] 
##Sch name = JA2 
#set_property PACKAGE_PIN L2 [get_ports {JA[1]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[1]}] 
##Sch name = JA3 
#set_property PACKAGE_PIN J2 [get_ports {JA[2]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[2]}] 
##Sch name = JA4 
#set_property PACKAGE_PIN G2 [get_ports {JA[3]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[3]}] 
##Sch name = JA7 
#set_property PACKAGE_PIN H1 [get_ports {JA[4]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[4]}] 
##Sch name = JA8 
#set_property PACKAGE_PIN K2 [get_ports {JA[5]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[5]}] 
##Sch name = JA9 
#set_property PACKAGE_PIN H2 [get_ports {JA[6]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[6]}] 
##Sch name = JA10 
#set_property PACKAGE_PIN G3 [get_ports {JA[7]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[7]}] 
##Pmod Header JB 
##Sch name = JB1 
#set_property PACKAGE_PIN A14 [get_ports {JB[0]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[0]}] 
##Sch name = JB2 
#set_property PACKAGE_PIN A16 [get_ports {JB[1]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[1]}] 
##Sch name = JB3 
#set_property PACKAGE_PIN B15 [get_ports {JB[2]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[2]}] ##Sch name = JB4 
#set_property PACKAGE_PIN B16 [get_ports {JB[3]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[3]}] 
##Sch name = JB7 
#set_property PACKAGE_PIN A15 [get_ports {JB[4]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[4]}] 
##Sch name = JB8 
#set_property PACKAGE_PIN A17 [get_ports {JB[5]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[5]}] 
##Sch name = JB9 
#set_property PACKAGE_PIN C15 [get_ports {JB[6]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[6]}] 
##Sch name = JB10  
#set_property PACKAGE_PIN C16 [get_ports {JB[7]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[7]}] 
  
##Pmod Header JC 
##Sch name = JC1 
#set_property PACKAGE_PIN K17 [get_ports {JC[0]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[0]}] 
##Sch name = JC2 
#set_property PACKAGE_PIN M18 [get_ports {JC[1]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[1]}] 
##Sch name = JC3 
#set_property PACKAGE_PIN N17 [get_ports {JC[2]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[2]}] 
##Sch name = JC4 
#set_property PACKAGE_PIN P18 [get_ports {JC[3]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[3]}] 
##Sch name = JC7 
#set_property PACKAGE_PIN L17 [get_ports {JC[4]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[4]}] 
##Sch name = JC8 
#set_property PACKAGE_PIN M19 [get_ports {JC[5]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[5]}] 
##Sch name = JC9 
#set_property PACKAGE_PIN P17 [get_ports {JC[6]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[6]}] 
##Sch name = JC10 
#set_property PACKAGE_PIN R18 [get_ports {JC[7]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[7]}] 

##Pmod Header JXADC 
##Sch name = XA1_P 
#set_property PACKAGE_PIN J3 [get_ports {JXADC[0]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[0]}] 
##Sch name = XA2_P 
#set_property PACKAGE_PIN L3 [get_ports {JXADC[1]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[1]}] 
##Sch name = XA3_P 
#set_property PACKAGE_PIN M2 [get_ports {JXADC[2]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[2]}] 
##Sch name = XA4_P 
#set_property PACKAGE_PIN N2 [get_ports {JXADC[3]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[3]}] 
##Sch name = XA1_N 
#set_property PACKAGE_PIN K3 [get_ports {JXADC[4]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[4]}] 
##Sch name = XA2_N 
#set_property PACKAGE_PIN M3 [get_ports {JXADC[5]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[5]}] 
##Sch name = XA3_N 
#set_property PACKAGE_PIN M1 [get_ports {JXADC[6]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[6]}] 
##Sch name = XA4_N 
#set_property PACKAGE_PIN N1 [get_ports {JXADC[7]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[7]}] 

##VGA Connector 
#set_property PACKAGE_PIN G19 [get_ports {vgaRed[0]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[0]}] 
#set_property PACKAGE_PIN H19 [get_ports {vgaRed[1]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[1]}] 
#set_property PACKAGE_PIN J19 [get_ports {vgaRed[2]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[2]}] 
#set_property PACKAGE_PIN N19 [get_ports {vgaRed[3]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[3]}] 
#set_property PACKAGE_PIN N18 [get_ports {vgaBlue[0]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[0]}] 
#set_property PACKAGE_PIN L18 [get_ports {vgaBlue[1]}] 	 	 	 	  		
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[1]}] 
#set_property PACKAGE_PIN K18 [get_ports {vgaBlue[2]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[2]}] 
#set_property PACKAGE_PIN J18 [get_ports {vgaBlue[3]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[3]}] 
#set_property PACKAGE_PIN J17 [get_ports {vgaGreen[0]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[0]}] 
#set_property PACKAGE_PIN H17 [get_ports {vgaGreen[1]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[1]}] 
#set_property PACKAGE_PIN G17 [get_ports {vgaGreen[2]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[2]}] 
#set_property PACKAGE_PIN D17 [get_ports {vgaGreen[3]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[3]}] 
#set_property PACKAGE_PIN P19 [get_ports Hsync] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports Hsync] 
#set_property PACKAGE_PIN R19 [get_ports Vsync] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports Vsync] 

##USB-RS232 Interface 
#set_property PACKAGE_PIN B18 [get_ports RsRx] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports RsRx] 
#set_property PACKAGE_PIN A18 [get_ports RsTx] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports RsTx] 

##USB HID (PS/2) 
#set_property PACKAGE_PIN C17 [get_ports PS2Clk] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports PS2Clk] 
 	#set_property PULLUP true [get_ports PS2Clk] 
#set_property PACKAGE_PIN B17 [get_ports PS2Data]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports PS2Data] 	 
 	#set_property PULLUP true [get_ports PS2Data] 

##Quad SPI Flash 
##Note that CCLK_0 cannot be placed in 7 series devices. You can access it using the 
##STARTUPE2 primitive. 
#set_property PACKAGE_PIN D18 [get_ports {QspiDB[0]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[0]}] 
#set_property PACKAGE_PIN D19 [get_ports {QspiDB[1]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[1]}] 
#set_property PACKAGE_PIN G18 [get_ports {QspiDB[2]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[2]}] 
#set_property PACKAGE_PIN F18 [get_ports {QspiDB[3]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[3]}] 
#set_property PACKAGE_PIN K19 [get_ports QspiCSn]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports QspiCSn] 


//pulse_controller and display controller is the same as provided to us
 
