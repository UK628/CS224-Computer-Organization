CS224
Lab 3
Sec 2
Utku Kurtulmus
21903025
16.03.2022

=========================Part1========================================
Display Reverse Order
	.text
# CS224 Spring 2022, Program to be used in Lab3
# March 14, 2022
# 
	li	$a0, 10 	#create a linked list with 10 nodes
	jal	createLinkedList
	
# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	
	li 	$a1,1
	jal 	DisplayReverseOrderRecursively
	
# Stop. 
	li	$v0, 10
	syscall

createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
#  node i contains the value i in the data field.
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.

# store the node index as data
	sw	$s1, 4($s2)	# Store the data value.
	
addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
	
# store the node index as data
	sw	$s1, 4($s2)	# Store the data value.
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s3: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s1: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	

# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
#=========================================================
#$a0 contains the list head, $a1 contains node number(initially 1 is given) 
DisplayReverseOrderRecursively:

	#save to stack
	addi $sp, $sp, -20
	sw $s0, 16($sp)
	sw $s1, 12($sp)
	sw $s2, 8($sp)
	sw $ra, 4($sp)
	sw $a0, 0($sp)
	
	#base case
	#if a0 is zero there is no node
	bne $a0, $zero else
	lw  $s0, 16($sp)
	lw  $s1, 12($sp)
	lw  $s2, 8($sp)
	addi $sp, $sp, 20 
	jr $ra

	else:
		#update $a0
		lw $a0, 0($a0) #$a0 now points to the next node
		addi $a1, $a1, 1
		jal DisplayReverseOrderRecursively #print next node
		addi $a1, $a1, -1
		
		#print current node
		# $s0: address of current node: print in hex.
		# $s1: address of next node: print in hex.
		# $s2: data field value of current node: print in decimal.
		lw $s0, 0($sp)
		lw $s1, 0($s0)
		lw $s2, 4($s0)

		la	$a0, line
		li	$v0, 4
		syscall		# Print line seperator
		
		la	$a0, nodeNumberLabel
		li	$v0, 4
		syscall
	
		move	$a0, $a1	# $a1: Node number (position) of current node
		li	$v0, 1
		syscall
	
		la	$a0, addressOfCurrentNodeLabel
		li	$v0, 4
		syscall
	
		move	$a0, $s0	# $s0: Address of current node
		li	$v0, 34
		syscall

		la	$a0, addressOfNextNodeLabel
		li	$v0, 4
		syscall

		move	$a0, $s1	# $s1: Address of next node
		li	$v0, 34
		syscall	
	
		la	$a0, dataValueOfCurrentNode
		li	$v0, 4
		syscall
		
		move	$a0, $s2	# $s2: Data of current node
		li	$v0, 1		
		syscall	
		
		lw $ra, 4($sp)
		lw  $s0, 16($sp)
		lw  $s1, 12($sp)
		lw  $s2, 8($sp)
		addi $sp, $sp, 20 
		jr $ra
#=========================================================
#$a0 points to original list, $v0 points to new list		
DuplicateListIterative:
	
	#save s registers to stack
	addi $sp, $sp, -16
	sw $s0, 12($sp)
	sw $s1, 8($sp)
	sw $s3, 4($sp)
	sw $s4, 0($sp)
	
	move $s0, $a0 #$s0 original list node pointer
	
	while:
	beq $s0, $zero, done
	
	bne $s0, $a0, generalCase
	#if its the first node, store the head pointer in $s4 to move it later $v0
	#create empty node
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
	
	#store the head pointer in $s4, use $s1 as the new linked list's pointer
	move $s1, $v0
	move $s4, $v0
	
	#fill the empty node
	lw $s3, 4($s0) #$s3 data value
	sw $s3, 4($s1)
	#make the next node address null(0)
	sw $zero, 0($s1)
	
	#update original list pointer
	lw $s0, 0($s0)
	
	j while
	
	generalCase:
		#create empty node
		li	$a0, 8 		# Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall
		
		#connect empty node to previous node(the node $s1 currently pointing is the previous one)
		sw $v0, 0($s1) #s1->next = new node
		#update $s1 to this empty node
		lw $s1, 0($s1)
		
		#fill the empty node
		lw $s3, 4($s0) #$s3 data value
		sw $s3, 4($s1)
		
		#make the next node address null(0)
		sw $zero, 0($s1)
		
		#update original list pointer
		lw $s0, 0($s0)
	
		j while
	
		done:
		move $v0, $s4 #move head to $v0
		
		#get s registers values from stack
		lw $s4, 0($sp)
		lw $s3, 4($sp)
		lw $s1, 8($sp)
	 	lw $s0, 12($sp)
		addi $sp, $sp, 16
	 	
	 	#go to next instruction
	 	jr $ra
#==============================================================================
#$a0 points to original list, $v0 points to new list
DuplicateListRecursive:

	addi $sp, $sp,-16
	sw $s0,	12($sp)
	sw $s1, 8($sp)
	sw $ra, 4($sp)
	sw $a0, 0($sp)
	
	#base case
	bne $a0, $zero, else1
	
	lw $s1, 8($sp)
	lw $s0,	12($sp)
	addi $sp, $sp,16
	
	li $v0, 0
	jr $ra #return 0(this will indicate the end of the list(nullptr)
	else1:
		#create first node
		li	$a0, 8 		# Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall
		
		#get back $a0(original headptr)'s value from stack
		lw $a0, 0($sp)
		
		#fill first node	
		lw $s0, 4($a0) #$s0 data value of copied head	
		sw $s0, 4($v0) #save this value to new head pointer's data segment
		
		#store the head pointer in stack
		addi $sp, $sp, -4
		sw $v0, 0($sp)
		
		#update $a0
		lw $a0, 0($a0)
						
		#create the rest of the list and connect it
		jal DuplicateListRecursive
		
		#$v0 now points to the next node and our first node headptr is stored in stack
		move $s1, $v0 #next node pointer
		lw $v0,0($sp)
		addi $sp, $sp, 4 #get back our headptr
		#connect headptr to next node
		sw $s1, 0($v0)
		
		lw $a0, 0($sp)
		lw $ra, 4($sp)
		lw $s1, 8($sp)
		lw $s0,	12($sp)
		addi $sp, $sp,16
		
		jr $ra #go to next inst
#==============================================================================
	.data
	
line:	
	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "

========================================Part2======================================= 
Iterative Copy
	.text
# CS224 Spring 2022, Program to be used in Lab3
# March 14, 2022
# 
	li	$a0, 10 	#create a linked list with 10 nodes
	jal	createLinkedList
	
# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	move $s0, $a0 #store the original list address in s0
	jal DuplicateListIterative
	#v0 contains the address of new list
	#save it to a s register
	move $s1, $v0 
	
	#print original list
	li $v0, 4
	la $a0 original
	syscall
	
	move	$a0, $s0
	jal printLinkedList
	
	#print copy list
	li $v0, 4
	la $a0 copy
	syscall
	
	move	$a0, $s1
	jal printLinkedList	
# Stop. 
	li	$v0, 10
	syscall

createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
#  node i contains the value i in the data field.
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.

# store the node index as data
	sw	$s1, 4($s2)	# Store the data value.
	
addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
	
# store the node index as data
	sw	$s1, 4($s2)	# Store the data value.
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s3: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s1: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	

# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
#=========================================================
#$a0 contains the list head, $a1 contains node number(initially 1 is given) 
DisplayReverseOrderRecursively:

	#save to stack
	addi $sp, $sp, -20
	sw $s0, 16($sp)
	sw $s1, 12($sp)
	sw $s2, 8($sp)
	sw $ra, 4($sp)
	sw $a0, 0($sp)
	
	#base case
	#if a0 is zero there is no node
	bne $a0, $zero else
	lw  $s0, 16($sp)
	lw  $s1, 12($sp)
	lw  $s2, 8($sp)
	addi $sp, $sp, 20 
	jr $ra

	else:
		#update $a0
		lw $a0, 0($a0) #$a0 now points to the next node
		addi $a1, $a1, 1
		jal DisplayReverseOrderRecursively #print next node
		addi $a1, $a1, -1
		
		#print current node
		# $s0: address of current node: print in hex.
		# $s1: address of next node: print in hex.
		# $s2: data field value of current node: print in decimal.
		lw $s0, 0($sp)
		lw $s1, 0($s0)
		lw $s2, 4($s0)

		la	$a0, line
		li	$v0, 4
		syscall		# Print line seperator
		
		la	$a0, nodeNumberLabel
		li	$v0, 4
		syscall
	
		move	$a0, $a1	# $a1: Node number (position) of current node
		li	$v0, 1
		syscall
	
		la	$a0, addressOfCurrentNodeLabel
		li	$v0, 4
		syscall
	
		move	$a0, $s0	# $s0: Address of current node
		li	$v0, 34
		syscall

		la	$a0, addressOfNextNodeLabel
		li	$v0, 4
		syscall

		move	$a0, $s1	# $s1: Address of next node
		li	$v0, 34
		syscall	
	
		la	$a0, dataValueOfCurrentNode
		li	$v0, 4
		syscall
		
		move	$a0, $s2	# $s2: Data of current node
		li	$v0, 1		
		syscall	
		
		lw $ra, 4($sp)
		lw  $s0, 16($sp)
		lw  $s1, 12($sp)
		lw  $s2, 8($sp)
		addi $sp, $sp, 20 
		jr $ra
#=========================================================
#$a0 points to original list, $v0 points to new list		
DuplicateListIterative:
	
	#save s registers to stack
	addi $sp, $sp, -16
	sw $s0, 12($sp)
	sw $s1, 8($sp)
	sw $s3, 4($sp)
	sw $s4, 0($sp)
	
	move $s0, $a0 #$s0 original list node pointer
	
	while:
	beq $s0, $zero, done
	
	bne $s0, $a0, generalCase
	#if its the first node, store the head pointer in $s4 to move it later $v0
	#create empty node
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
	
	#store the head pointer in $s4, use $s1 as the new linked list's pointer
	move $s1, $v0
	move $s4, $v0
	
	#fill the empty node
	lw $s3, 4($s0) #$s3 data value
	sw $s3, 4($s1)
	#make the next node address null(0)
	sw $zero, 0($s1)
	
	#update original list pointer
	lw $s0, 0($s0)
	
	j while
	
	generalCase:
		#create empty node
		li	$a0, 8 		# Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall
		
		#connect empty node to previous node(the node $s1 currently pointing is the previous one)
		sw $v0, 0($s1) #s1->next = new node
		#update $s1 to this empty node
		lw $s1, 0($s1)
		
		#fill the empty node
		lw $s3, 4($s0) #$s3 data value
		sw $s3, 4($s1)
		
		#make the next node address null(0)
		sw $zero, 0($s1)
		
		#update original list pointer
		lw $s0, 0($s0)
	
		j while
	
		done:
		move $v0, $s4 #move head to $v0
		
		#get s registers values from stack
		lw $s4, 0($sp)
		lw $s3, 4($sp)
		lw $s1, 8($sp)
	 	lw $s0, 12($sp)
		addi $sp, $sp, 16
	 	
	 	#go to next instruction
	 	jr $ra
#==============================================================================
#$a0 points to original list, $v0 points to new list
DuplicateListRecursive:

	addi $sp, $sp,-16
	sw $s0,	12($sp)
	sw $s1, 8($sp)
	sw $ra, 4($sp)
	sw $a0, 0($sp)
	
	#base case
	bne $a0, $zero, else1
	
	lw $s1, 8($sp)
	lw $s0,	12($sp)
	addi $sp, $sp,16
	
	li $v0, 0
	jr $ra #return 0(this will indicate the end of the list(nullptr)
	else1:
		#create first node
		li	$a0, 8 		# Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall
		
		#get back $a0(original headptr)'s value from stack
		lw $a0, 0($sp)
		
		#fill first node	
		lw $s0, 4($a0) #$s0 data value of copied head	
		sw $s0, 4($v0) #save this value to new head pointer's data segment
		
		#store the head pointer in stack
		addi $sp, $sp, -4
		sw $v0, 0($sp)
		
		#update $a0
		lw $a0, 0($a0)
						
		#create the rest of the list and connect it
		jal DuplicateListRecursive
		
		#$v0 now points to the next node and our first node headptr is stored in stack
		move $s1, $v0 #next node pointer
		lw $v0,0($sp)
		addi $sp, $sp, 4 #get back our headptr
		#connect headptr to next node
		sw $s1, 0($v0)
		
		lw $a0, 0($sp)
		lw $ra, 4($sp)
		lw $s1, 8($sp)
		lw $s0,	12($sp)
		addi $sp, $sp,16
		
		jr $ra #go to next inst
#==============================================================================
	.data

original:
	.asciiz "\n\nThe original list: "
copy:
	.asciiz "\n\nThe copy list: "
		
line:	
	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "


==========================================Part 3=======================================

	.text
# CS224 Spring 2022, Program to be used in Lab3
# March 14, 2022
# 
	li	$a0, 10 	#create a linked list with 10 nodes
	jal	createLinkedList
	
# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	move $s0, $a0 #store the original list address in s0
	jal DuplicateListRecursive
	#v0 contains the address of new list
	#save it to a s register
	move $s1, $v0 
	
	#print original list
	li $v0, 4
	la $a0 original
	syscall
	
	move	$a0, $s0
	jal printLinkedList
	
	#print copy list
	li $v0, 4
	la $a0 copy
	syscall
	
	move	$a0, $s1
	jal printLinkedList	
# Stop. 
	li	$v0, 10
	syscall

createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
#  node i contains the value i in the data field.
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.

# store the node index as data
	sw	$s1, 4($s2)	# Store the data value.
	
addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
	
# store the node index as data
	sw	$s1, 4($s2)	# Store the data value.
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s3: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s1: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	

# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
#=========================================================
#$a0 contains the list head, $a1 contains node number(initially 1 is given) 
DisplayReverseOrderRecursively:

	#save to stack
	addi $sp, $sp, -20
	sw $s0, 16($sp)
	sw $s1, 12($sp)
	sw $s2, 8($sp)
	sw $ra, 4($sp)
	sw $a0, 0($sp)
	
	#base case
	#if a0 is zero there is no node
	bne $a0, $zero else
	lw  $s0, 16($sp)
	lw  $s1, 12($sp)
	lw  $s2, 8($sp)
	addi $sp, $sp, 20 
	jr $ra

	else:
		#update $a0
		lw $a0, 0($a0) #$a0 now points to the next node
		addi $a1, $a1, 1
		jal DisplayReverseOrderRecursively #print next node
		addi $a1, $a1, -1
		
		#print current node
		# $s0: address of current node: print in hex.
		# $s1: address of next node: print in hex.
		# $s2: data field value of current node: print in decimal.
		lw $s0, 0($sp)
		lw $s1, 0($s0)
		lw $s2, 4($s0)

		la	$a0, line
		li	$v0, 4
		syscall		# Print line seperator
		
		la	$a0, nodeNumberLabel
		li	$v0, 4
		syscall
	
		move	$a0, $a1	# $a1: Node number (position) of current node
		li	$v0, 1
		syscall
	
		la	$a0, addressOfCurrentNodeLabel
		li	$v0, 4
		syscall
	
		move	$a0, $s0	# $s0: Address of current node
		li	$v0, 34
		syscall

		la	$a0, addressOfNextNodeLabel
		li	$v0, 4
		syscall

		move	$a0, $s1	# $s1: Address of next node
		li	$v0, 34
		syscall	
	
		la	$a0, dataValueOfCurrentNode
		li	$v0, 4
		syscall
		
		move	$a0, $s2	# $s2: Data of current node
		li	$v0, 1		
		syscall	
		
		lw $ra, 4($sp)
		lw  $s0, 16($sp)
		lw  $s1, 12($sp)
		lw  $s2, 8($sp)
		addi $sp, $sp, 20 
		jr $ra
#=========================================================
#$a0 points to original list, $v0 points to new list		
DuplicateListIterative:
	
	#save s registers to stack
	addi $sp, $sp, -16
	sw $s0, 12($sp)
	sw $s1, 8($sp)
	sw $s3, 4($sp)
	sw $s4, 0($sp)
	
	move $s0, $a0 #$s0 original list node pointer
	
	while:
	beq $s0, $zero, done
	
	bne $s0, $a0, generalCase
	#if its the first node, store the head pointer in $s4 to move it later $v0
	#create empty node
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
	
	#store the head pointer in $s4, use $s1 as the new linked list's pointer
	move $s1, $v0
	move $s4, $v0
	
	#fill the empty node
	lw $s3, 4($s0) #$s3 data value
	sw $s3, 4($s1)
	#make the next node address null(0)
	sw $zero, 0($s1)
	
	#update original list pointer
	lw $s0, 0($s0)
	
	j while
	
	generalCase:
		#create empty node
		li	$a0, 8 		# Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall
		
		#connect empty node to previous node(the node $s1 currently pointing is the previous one)
		sw $v0, 0($s1) #s1->next = new node
		#update $s1 to this empty node
		lw $s1, 0($s1)
		
		#fill the empty node
		lw $s3, 4($s0) #$s3 data value
		sw $s3, 4($s1)
		
		#make the next node address null(0)
		sw $zero, 0($s1)
		
		#update original list pointer
		lw $s0, 0($s0)
	
		j while
	
		done:
		move $v0, $s4 #move head to $v0
		
		#get s registers values from stack
		lw $s4, 0($sp)
		lw $s3, 4($sp)
		lw $s1, 8($sp)
	 	lw $s0, 12($sp)
		addi $sp, $sp, 16
	 	
	 	#go to next instruction
	 	jr $ra
#==============================================================================
#$a0 points to original list, $v0 points to new list
DuplicateListRecursive:

	addi $sp, $sp,-16
	sw $s0,	12($sp)
	sw $s1, 8($sp)
	sw $ra, 4($sp)
	sw $a0, 0($sp)
	
	#base case
	bne $a0, $zero, else1
	
	lw $s1, 8($sp)
	lw $s0,	12($sp)
	addi $sp, $sp,16
	
	li $v0, 0
	jr $ra #return 0(this will indicate the end of the list(nullptr)
	else1:
		#create first node
		li	$a0, 8 		# Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall
		
		#get back $a0(original headptr)'s value from stack
		lw $a0, 0($sp)
		
		#fill first node	
		lw $s0, 4($a0) #$s0 data value of copied head	
		sw $s0, 4($v0) #save this value to new head pointer's data segment
		
		#store the head pointer in stack
		addi $sp, $sp, -4
		sw $v0, 0($sp)
		
		#update $a0
		lw $a0, 0($a0)
						
		#create the rest of the list and connect it
		jal DuplicateListRecursive
		
		#$v0 now points to the next node and our first node headptr is stored in stack
		move $s1, $v0 #next node pointer
		lw $v0,0($sp)
		addi $sp, $sp, 4 #get back our headptr
		#connect headptr to next node
		sw $s1, 0($v0)
		
		lw $a0, 0($sp)
		lw $ra, 4($sp)
		lw $s1, 8($sp)
		lw $s0,	12($sp)
		addi $sp, $sp,16
		
		jr $ra #go to next inst
#==============================================================================
	.data
original:
	.asciiz "\n\nThe original list: "
copy:
	.asciiz "\n\nThe copy list: "
line:	
	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "

